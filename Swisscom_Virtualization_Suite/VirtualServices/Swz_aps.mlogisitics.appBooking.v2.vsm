<?xml version="1.0" ?>

<VSModel name="Swz_aps.mlogisitics.appBooking.v2" version="5">

<meta>
   <create version="9.1.0" buildNumber="9.1.0.399" author="admin" date="01/16/2017" host="INBASDLP00207" />
   <lastEdited version="10.0.0" buildNumber="10.0.0.431" author="admin" date="02/27/2017" host="STECON1" />
</meta>

<id>21CB96DBE411E6822212689D698C33</id>
<IsInProject>true</IsInProject>
<sig>ZWQ9NSZ0Y3Y9NSZsaXNhdj0xMC4wLjAgKDEwLjAuMC40MzEpJm5vZGVzPTE0OTUxMTQyMDM=</sig>
<subprocess>false</subprocess>

<initState>
</initState>

<resultState>
</resultState>

<deletedProps>
</deletedProps>

    <Node name="Virtual HTTPS Listener 9003" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpListenStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual Service Execution Router" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.xml.XMLDataProtocol</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.Virtual HTTPS Listener 9003.rsp</valueToFilterKey>
      <tag>ns0:startPeriod</tag>
      <tagn>1</tagn>
      <prop>DT_APPSTARTDATE_Test</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.Virtual HTTPS Listener 9003.rsp</valueToFilterKey>
      <tag>ns0:geId</tag>
      <tagn>1</tagn>
      <prop>DT_GETID_Test</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.Virtual HTTPS Listener 9003.rsp</valueToFilterKey>
      <tag>ns0:syncId</tag>
      <tagn>1</tagn>
      <prop>DT_SYNCID_Test</prop>
      </Filter>


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If being efficient" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Most Efficient, branching to VS Image Response Selection</log>
<then>IdentifyOprName</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>EFFICIENT</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<listenPort>9003</listenPort>
<basePath>/wfm/services/WfmAppBookingV002</basePath>
<bindOnly>false</bindOnly>
<useSSL>false</useSSL>
<sslClientAuthType>none</sslClientAuthType>
    </Node>


    <Node name="Virtual Service Execution Router" log=""
          type="com.itko.lisa.vse.stateful.VSRouterStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="VS Image Response Selection" > 

<onerror>abort</onerror>
<script>// This script must return either an enum entry from ExecutionMode or&#13;&#10;// a string that is the name of an enum entry.  The DYNAMIC entry may&#13;&#10;// not be returned.  It will be executed for DYNAMIC execution mode&#13;&#10;// only.&#13;&#10;import com.itko.lisa.vse.ExecutionMode;&#13;&#10;&#13;&#10;return ExecutionMode.EFFICIENT;&#13;&#10;&#13;&#10;&#13;&#10;/* other values: &#13;&#10;&#9;ExecutionMode.TRACK;&#13;&#10;&#9;ExecutionMode.STAND_IN;&#13;&#10;&#9;ExecutionMode.LIVE;&#13;&#10;&#9;ExecutionMode.FAILOVER;&#13;&#10;&#9;ExecutionMode.VALIDATION;&#13;&#10;&#9;ExecutionMode.LEARNING;&#13;&#10;*/&#13;&#10;</script>
<supportedModes>
<mode>STAND_IN</mode>
<mode>TRACK</mode>
<mode>LIVE</mode>
<mode>FAILOVER</mode>
<mode>LEARNING</mode>
<mode>DYNAMIC</mode>
<mode>VALIDATION</mode>
<mode>EFFICIENT</mode>
</supportedModes>
<liveInvocationStep>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</liveInvocationStep>
    </Node>


    <Node name="VS Image Response Selection" log=""
          type="com.itko.lisa.vse.stateful.ConversationalStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</log>
<then>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</log>
<then>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Transaction Tracking, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>TRACK</executionMode>
</CheckResult>

<vsiSource>{{LISA_RELATIVE_PROJ_ROOT}}/VirtualServices/Images/Swz_aps.mlogisitics.appBooking.v2.vsi</vsiSource>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<outputAsObject>true</outputAsObject>
<liveInvocationStep>Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}</liveInvocationStep>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual HTTPS Responder" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpRespondStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="false" 
          next="Virtual HTTPS Listener 9003" > 

<responseList>lisa.vse.response</responseList>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="IdentifyOprName" log=""
          type="com.itko.lisa.test.UserScriptNode" 
          version="1" 
          uid="1FEC1AFEE45C11E6AC7D12689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="VS Image Response Selection" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assertion name: Any Exception Then Fail checks for: true is of type: Assert on Invocation Exception.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="ChlIfOpr(getAppointment)" type="com.itko.lisa.test.CheckResultPropRegEx">
<log>Assertion name: ChlIfOpr(getAppointment) checks for: true is of type: Property Value Expression.</log>
<then>retrieveDataFromgetApp</then>
<valueToAssertKey></valueToAssertKey>
        <prop>incomingOperation</prop>
        <param>multiplexAppointmentCalculate</param>
</CheckResult>

<CheckResult assertTrue="true" name="ChlIfOpr(bookAppointment)" type="com.itko.lisa.test.CheckResultPropRegEx">
<log>Assertion name: ChlIfOpr(getAppointment) checks for: true is of type: Property Value Expression.</log>
<then>retrieveDataFromBookApp</then>
<valueToAssertKey></valueToAssertKey>
        <prop>incomingOperation</prop>
        <param>bookAppointment</param>
</CheckResult>

<onerror>abort</onerror>
<language>BeanShell</language>
<copyProps>TestExecProps</copyProps>
<script>&#13;&#10;//Importing devtest classes&#13;&#10;import com.itko.lisa.vse.stateful.model.Request;&#13;&#10;import com.itko.lisa.vse.stateful.model.Response;&#13;&#10;&#13;&#10;//Get the input REQUEST from into a string for processing&#13;&#10;String strOperationName = &quot;&quot;;&#13;&#10;Request objRequest = testExec.getStateValue(&quot;lisa.vse.request&quot;);&#13;&#10;&#13;&#10;//Getting the operation name from the request object&#13;&#10;strOperationName = objRequest.getOperation();&#13;&#10;&#13;&#10;try{&#13;&#10;    if(strOperationName.equals(&quot;multiplexAppointmentCalculate&quot;)){&#13;&#10;        testExec.setStateValue(&quot;incomingOperation&quot;,&quot;multiplexAppointmentCalculate&quot;);&#13;&#10;        return true;&#13;&#10;    }else if(strOperationName.equals(&quot;bookAppointment&quot;)){&#13;&#10;        testExec.setStateValue(&quot;incomingOperation&quot;,&quot;bookAppointment&quot;);&#13;&#10;        return true;&#13;&#10;    }else{&#13;&#10;        testExec.setStateValue(&quot;incomingOperation&quot;,&quot;Unknown Operation&quot;);&#13;&#10;        return false;&#13;&#10;    }&#13;&#10;}catch(exception){&#13;&#10;    testExec.setStateValue(&quot;incomingOperation&quot;,&quot;Exceptions&quot;);&#13;&#10;    return false;&#13;&#10;}</script>
    </Node>


    <Node name="Virtual HTTPS Live Invocation {{LIVE_INVOCATION_PORT}}" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpLiveInvocationStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If learning" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Learning, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>LEARNING</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>Live System Failure</onExceptionStep>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<vseLookupStep>VS Image Response Selection</vseLookupStep>
<targetServer>{{LIVE_INVOCATION_SERVER}}</targetServer>
<targetPort>{{LIVE_INVOCATION_PORT}}</targetPort>
<hostHeaderPassThrough>false</hostHeaderPassThrough>
<useSSLToServer>false</useSSLToServer>
<useSSL>false</useSSL>
    </Node>


    <Node name="Virtual Service Tracking" log=""
          type="com.itko.lisa.vse.stateful.VSTrackingStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual HTTPS Responder" > 

<imageResponseProperty>lisa.vse.image.response</imageResponseProperty>
<liveResponseProperty>lisa.vse.live.response</liveResponseProperty>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="retrieveDataFromBookApp" log=""
          type="com.itko.lisa.test.NoTransNode" 
          version="1" 
          uid="57196A4EE46211E6AC7D12689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="true" 
          next="fetch_Values_from_APPOINTMENTS" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:id</tag>
      <tagn>1</tagn>
      <prop>BA_APPID</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:geId</tag>
      <tagn>1</tagn>
      <prop>BA_GEID</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:syncId</tag>
      <tagn>1</tagn>
      <prop>BA_SYNCID</prop>
      </Filter>

    </Node>


    <Node name="fetch_Values_from_APPOINTMENTS" log=""
          type="com.itko.lisa.jdbc.JDBCNode" 
          version="1" 
          uid="7C2E686EE46311E6AC7D12689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="VS Image Response Selection" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Ensure Result Set Size" type="com.itko.lisa.jdbc.CheckResultJDBCResultSet">
<log>Assertion name: Ensure Result Set Size checks for: true is of type: Ensure JDBC Result Set Size.</log>
<then>update_APPOINTMENTS</then>
<valueToAssertKey></valueToAssertKey>
        <hasWarnings>false</hasWarnings>
        <rowsAtLeast>1</rowsAtLeast>
        <rowsNoMore>1</rowsNoMore>
</CheckResult>

<driver>org.apache.derby.jdbc.ClientDriver</driver>
<dataSourceConnect>false</dataSourceConnect>
<jndiFactory></jndiFactory>
<jndiServerURL></jndiServerURL>
<jndiDataSourceName></jndiDataSourceName>
<connect>jdbc:derby://localhost:1528/database/lisa.db</connect>
<user>rpt</user>
<password_enc>l6a0b2e48f10cc2b804b4c305e996e2376ca8380844e0b505796c7abbbe81f54c3e4701</password_enc>
<onSQLError>abort</onSQLError>
<resultSet>true</resultSet>
<maxRows>-1</maxRows>
<keepOpen>false</keepOpen>
<usePool>true</usePool>
<sql>SELECT * from APPOINTMENTS_Table where appointmentID = ?</sql>
<jdbcParam mode="IN" index="1" type="STRING" value="{{BA_APPID}}"></jdbcParam>
<IsStoredProc>true</IsStoredProc>
    </Node>


    <Node name="retrieveDataFromgetApp" log=""
          type="com.itko.lisa.test.NoTransNode" 
          version="1" 
          uid="8D8D7C53E45D11E6AC7D12689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="true" 
          next="getNext&apos;N&apos;Days" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:startPeriod</tag>
      <tagn>1</tagn>
      <prop>DT_APPSTARTDATE</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:geId</tag>
      <tagn>1</tagn>
      <prop>DT_GETID</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterXMLGetChildText">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
      <tag>ns0:syncId</tag>
      <tagn>1</tagn>
      <prop>DT_SYNCID</prop>
      </Filter>

    </Node>


    <Node name="getNext&apos;N&apos;Days" log=""
          type="com.itko.lisa.test.UserScriptNode" 
          version="1" 
          uid="6E5294FFDBE811E6822212689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="getAppointmentResponse" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assertion name: Any Exception Then Fail checks for: true is of type: Assert on Invocation Exception.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<onerror>abort</onerror>
<language>BeanShell</language>
<copyProps>TestExecProps</copyProps>
<script>//Script to return date array&#13;&#10;package com.javacoderanch.sample.java.sql;&#13;&#10;import java.util.Date;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.text.ParseException;&#13;&#10;import java.sql.DriverManager;&#13;&#10;import java.sql.Connection;&#13;&#10;import java.sql.PreparedStatement;&#13;&#10;import java.sql.SQLException;&#13;&#10;import java.text.DateFormat;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.sql.*;&#13;&#10;&#13;&#10;//Date[] dateArr2 = new Date[10];&#13;&#10;//String[] startD = {&quot;8:00:00&quot;,&quot;8:00:00&quot;,&quot;8:00:00&quot;,&quot;10:00:00&quot;,&quot;13:00:00&quot;,};&#13;&#10;String[] startD = {&quot;8:00:00&quot;,&quot;16:00:00&quot;,&quot;8:00:00&quot;,&quot;15:00:00&quot;,&quot;8:00:00&quot;,&quot;12:00:00&quot;,&quot;10:00:00&quot;,&quot;17:00:00&quot;,&quot;13:00:00&quot;,&quot;17:00:00&quot;};&#13;&#10;String[] endD = {&quot;16:00:00&quot;,&quot;15:00:00&quot;,&quot;12:00:00&quot;,&quot;17:00:00&quot;,&quot;17:00:00&quot;};&#13;&#10;&#13;&#10;String StartDate = testExec.getStateValue(&quot;DT_APPSTARTDATE&quot;);&#13;&#10;String GETID = testExec.getStateValue(&quot;DT_GETID&quot;);&#13;&#10;String SYNCID = testExec.getStateValue(&quot;DT_SYNCID&quot;);&#13;&#10;&#13;&#10;//String AppStartDate = StartDate.substring(0,10);&#13;&#10;int intNoOfDays = {{NoOfDays}};&#13;&#10;String APPSTARTDATE = &quot;&quot;;&#13;&#10;String APPENDDATE = &quot;&quot;;&#13;&#10;&#13;&#10;public nextDates(String AppStartDate1, int intNoOfDays1){&#13;&#10;&#13;&#10;    Calendar cal = Calendar.getInstance();&#13;&#10;    SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#13;&#10;    //String str1 = AppStartDate1;&#13;&#10;    Date date = formatter.parse(AppStartDate1);&#13;&#10;    cal.setTime(date);&#13;&#10;&#13;&#10;    for(i=0; i&lt;intNoOfDays1; i++){&#13;&#10;&#13;&#10;       //String sDay = cal.getDay();&#13;&#10;&#13;&#10;       cal.add(Calendar.DATE,1);&#13;&#10;       Date ndate = cal.getTime();&#13;&#10;&#13;&#10;        if(cal.get(Calendar.DAY_OF_WEEK) == 1 || cal.get(Calendar.DAY_OF_WEEK) == 7){&#13;&#10;            i--;&#13;&#10;            continue;&#13;&#10;        }&#13;&#10;&#13;&#10;        //dateArr2[i] = ndate;&#13;&#10;        cal.setTime(ndate);&#13;&#10;&#13;&#10;        System.out.println(&quot;date : &quot; + ndate);&#13;&#10;        //date : Fri Dec 23 00:00:00 IST 2016&#13;&#10;        //datef : 2016-12-23&#13;&#10;&#13;&#10;        //SimpleDateFormat: Converting  date to string&#13;&#10;        SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#13;&#10;        String str2 = formatter.format(ndate);&#13;&#10;        System.out.println(&quot;strdate : &quot; + str2);&#13;&#10;&#13;&#10;          //  len = startD.length;&#13;&#10;          //  System.out.println(&quot;alen : &quot; + len);&#13;&#10;&#13;&#10;        String str3 = str2 +&quot;T&quot;+&quot;08:00:00&quot;+&quot;+&quot;+&quot;01:00&quot;;&#13;&#10;        //System.out.println(&quot;strdate1 : &quot; + str3);&#13;&#10;&#13;&#10;        //testExec.setStateValue(&quot;Name1&quot;,&quot;Raj1&quot;);&#13;&#10;&#13;&#10;        for(j=0; j&lt;startD.length; j++){&#13;&#10;            String APPSTARTDATE = str2 + &quot;T&quot; + startD[j] + &quot;+&quot; + &quot;01:00&quot;;&#13;&#10;            j++;&#13;&#10;            String APPENDDATE = str2 + &quot;T&quot; + startD[j] + &quot;+&quot; + &quot;01:00&quot;;&#13;&#10;            //java.util.Date myDate = new java.util.Date();&#13;&#10;            //java.sql.Date APPSTARTDATE = new java.sql.Date(ndate.getTime());&#13;&#10;            //System.out.println(&quot;datef : &quot; + APPSTARTDATE); &#13;&#10;&#13;&#10;            Date cDate = new Date();&#13;&#10;            java.sql.Date currentDate = new java.sql.Date(cDate.getTime());&#13;&#10;&#13;&#10;            Connection dbConnection = null;&#13;&#10;            PreparedStatement preparedStatement = null;&#13;&#10;&#13;&#10;            Class.forName(testExec.getStateValue(&quot;DB_DRIVER&quot;));&#13;&#10;            dbConnection = DriverManager.getConnection(testExec.getStateValue(&quot;DB_CONNECTION&quot;), testExec.getStateValue(&quot;DB_USER&quot;), testExec.getStateValue(&quot;DB_PASSWORD&quot;));&#13;&#10;&#13;&#10;            String insertTableSQL = &quot;INSERT INTO APPOINTMENTS_Table&quot;&#13;&#10;                    + &quot;(GETID, SYNCID, STARTDATE, ENDDATE, CURRENTTIMESTAMP, STATUS) VALUES&quot;&#13;&#10;                    + &quot;(?, ?, ?, ?, ?,&apos;NEW&apos;)&quot;;&#13;&#10;&#13;&#10;            PreparedStatement preparedStatement = dbConnection.prepareStatement(insertTableSQL);&#13;&#10;            preparedStatement.setString(1,GETID);&#13;&#10;            preparedStatement.setString(2,SYNCID);&#13;&#10;            preparedStatement.setString(3,APPSTARTDATE);&#13;&#10;            preparedStatement.setString(4,APPENDDATE);&#13;&#10;            preparedStatement.setDate(5,currentDate);&#13;&#10;            preparedStatement.executeUpdate();&#13;&#10;&#13;&#10;            dbConnection = null;&#13;&#10;            preparedStatement = null;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;nextDates(StartDate, intNoOfDays);</script>
    </Node>


    <Node name="getAppointmentResponse" log=""
          type="com.itko.lisa.test.UserScriptNode" 
          version="1" 
          uid="E841E6FBDE0311E6BA2912689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="VS Image Response Selection" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assertion name: Any Exception Then Fail checks for: true is of type: Assert on Invocation Exception.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<onerror>abort</onerror>
<language>BeanShell</language>
<copyProps>TestExecProps</copyProps>
<script>package com.javacoderanch.sample.java.sql;&#13;&#10;import java.util.Date;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.text.ParseException;&#13;&#10;&#13;&#10;import java.sql.DriverManager;&#13;&#10;import java.sql.Connection;&#13;&#10;import java.sql.PreparedStatement;&#13;&#10;import java.sql.ResultSet;&#13;&#10;import java.sql.SQLException;&#13;&#10;&#13;&#10;StringBuffer combAppt= new StringBuffer(&quot;&quot;);&#13;&#10;String str = &quot;&quot;;&#13;&#10;String APP_str = &quot;&quot;;&#13;&#10;Connection dbConnection = null;&#13;&#10;PreparedStatement preparedStatement = null;&#13;&#10;&#13;&#10;Class.forName(testExec.getStateValue(&quot;DB_DRIVER&quot;));&#13;&#10;dbConnection = DriverManager.getConnection(testExec.getStateValue(&quot;DB_CONNECTION&quot;), testExec.getStateValue(&quot;DB_USER&quot;), testExec.getStateValue(&quot;DB_PASSWORD&quot;));&#13;&#10;&#13;&#10;String ReqGETID = testExec.getStateValue(&quot;DT_GETID&quot;);&#13;&#10;String selectTableSQL = &quot;SELECT APPOINTMENTID, STARTDATE, ENDDATE FROM APPOINTMENTS_Table WHERE GETID =&quot; + &quot;?&quot;;&#13;&#10;&#9;&#13;&#10;PreparedStatement preparedStatement = dbConnection.prepareStatement(selectTableSQL);&#13;&#10;preparedStatement.setString(1, ReqGETID);//here if i use DT_GETID directly, it will not work.Why?&#13;&#10;//preparedStatement.setString(1,&quot;Raj1&quot;);&#13;&#10;//preparedStatement.setString(1,GETID);&#13;&#10;//preparedStatement.setString(2,SYNCID);&#13;&#10;//preparedStatement.setString(3,APPSTARTDATE);&#13;&#10;//preparedStatement.setString(4,APPENDDATE);&#13;&#10;//preparedStatement.setDate(5,currentDate);&#13;&#10;&#13;&#10;ResultSet rs = preparedStatement.executeQuery();&#13;&#10;int i =0;&#13;&#10;&#13;&#10;//int size = rs.getFetchSize();&#13;&#10;//testExec.setStateValue(&quot;nrows&quot;,size);&#13;&#10;&#13;&#10;while (rs.next()) {&#13;&#10;    testExec.setStateValue(&quot;iValue&quot;,i);&#13;&#10;    String APPOINTMENTID1 = rs.getString(&quot;APPOINTMENTID&quot;);&#13;&#10;    String STARTDATE1 = rs.getString(&quot;STARTDATE&quot;);&#13;&#10;    String ENDDATE1 = rs.getString(&quot;ENDDATE&quot;);&#13;&#10;&#13;&#10;    System.out.println(&quot;APPOINTMENTID : &quot; + APPOINTMENTID1);&#13;&#10;    System.out.println(&quot;STARTDATE : &quot; + STARTDATE1);&#13;&#10;    System.out.println(&quot;ENDDATE : &quot; + ENDDATE1);&#13;&#10;&#13;&#10;    testExec.setStateValue(&quot;APP_STARTDATE&quot;,STARTDATE1);&#13;&#10;    testExec.setStateValue(&quot;APP_ENDDATE&quot;,ENDDATE1);&#13;&#10;    testExec.setStateValue(&quot;APPID&quot;,APPOINTMENTID1);&#13;&#10;&#13;&#10;    APPID1 = testExec.getStateValue(&quot;APPID&quot;);&#13;&#10; &#13;&#10;    //String str;&#13;&#10;    //String str1;&#13;&#10;    //testExec.setStateValue(&quot;APP_combAppt&quot;,combAppt);&#13;&#10;    //String str = &quot;Test&quot; + &quot;raj&quot; + APPID1; //i can&apos;t use property directly Ex: APPID&#13;&#10;    String str = &quot;&lt;aps:combinedAppointment&gt;&lt;aps:id&gt;&quot; + APPOINTMENTID1 + &quot;&lt;/aps:id&gt;&lt;aps:rank1&gt;29&lt;/aps:rank1&gt;&lt;aps:rank2&gt;26&lt;/aps:rank2&gt;&lt;aps:plannedLineActivationDateTime&gt;&quot; + STARTDATE1 + &quot;&lt;/aps:plannedLineActivationDateTime&gt;&lt;aps:serviceTimeSlot&gt;&lt;aps:serviceType&gt;OSI-Appointment&lt;/aps:serviceType&gt;&lt;aps:start&gt;&quot; + STARTDATE1 + &quot;&lt;/aps:start&gt;&lt;aps:end&gt;&quot; + ENDDATE1 + &quot;&lt;/aps:end&gt;&lt;aps:duration&gt;180&lt;/aps:duration&gt;&lt;/aps:serviceTimeSlot&gt;&lt;/aps:combinedAppointment&gt;&quot;;&#13;&#10;    testExec.setStateValue(&quot;APP_str&quot;,str);&#13;&#10;    //combAppt = combAppt.concat(str);&#13;&#10;    combAppt.append(str);&#13;&#10;&#13;&#10;    //String combAppt1 = combAppt;&#13;&#10;    //String combAppt1 = new String(combAppt);&#13;&#10;    testExec.setStateValue(&quot;APP_str1&quot;,combAppt);&#13;&#10;    //String combAppt1 = combAppt;&#13;&#10;    i++;&#13;&#10;}&#13;&#10;&#13;&#10;</script>
    </Node>


    <Node name="Live System Failure" log=""
          type="com.itko.lisa.test.NoTransNode" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="abort" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If failover" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Failover, branching to VS Image Response Selection</log>
<then>VS Image Response Selection</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>FAILOVER</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If standing in" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Stand In, branching to Virtual HTTPS Responder</log>
<then>Virtual HTTPS Responder</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>STAND_IN</executionMode>
</CheckResult>

    </Node>


    <Node name="update_APPOINTMENTS" log=""
          type="com.itko.lisa.jdbc.JDBCNode" 
          version="1" 
          uid="B2F27C80E46311E6AC7D12689D698C33" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="VS Image Response Selection" > 

<driver>org.apache.derby.jdbc.ClientDriver</driver>
<dataSourceConnect>false</dataSourceConnect>
<jndiFactory></jndiFactory>
<jndiServerURL></jndiServerURL>
<jndiDataSourceName></jndiDataSourceName>
<connect>jdbc:derby://localhost:1528/database/lisa.db</connect>
<user>rpt</user>
<password_enc>lc27df669a461692bba200e14ce166ae161bc20ed6c154931d95579ac45f9fdc8f9f9d7</password_enc>
<onSQLError>abort</onSQLError>
<resultSet>false</resultSet>
<maxRows>-1</maxRows>
<keepOpen>false</keepOpen>
<usePool>true</usePool>
<sql>Update APPOINTMENTS_Table&#13;&#10;Set Status =&apos;BOOKED&apos;&#13;&#10;where appointmentID ={{BA_APPID}}</sql>
<IsStoredProc>false</IsStoredProc>
    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          uid="21CB98DBE411E6822212689D698C33" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          uid="21CB9ADBE411E6822212689D698C33" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="abort" log="The test was aborted"
          type="com.itko.lisa.test.AbortStep" 
          version="1" 
          uid="21CB9CDBE411E6822212689D698C33" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


</VSModel>
